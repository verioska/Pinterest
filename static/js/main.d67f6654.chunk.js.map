{"version":3,"sources":["Cards/Cards.js","Navbar/Navbar.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","react_default","a","createElement","className","onClick","imgClick","url","src","Navbar","class","placeholder","Modal","e","target","getAttribute","modalClose","src_Navbar_Navbar","viewImg","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchData","con","state","page","setState","console","log","fetch","then","data","json","arr","results","objectSpread","img","concat","modal","modalOpen","bind","assertThisInitialized","i","_this2","_this3","map","element","src_Cards_Cards","urls","thumb","name","user","src_Modal_Modal","show","lib_default","dataLength","length","next","hasMore","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kVAYeA,MATf,SAAeC,GACX,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,QAAS,kBAAIL,EAAMM,SAASN,EAAMO,MACvDC,IAAKR,EAAMO,oBCgBRE,MAlBf,SAAgBT,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,KAAGO,MAAM,qBACTT,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAASO,YAAY,WACtCV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,UACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,aACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,YACAH,EAAAC,EAAAC,cAAA,KAAGO,MAAM,wBACTT,EAAAC,EAAAC,cAAA,KAAGO,MAAM,gBACTT,EAAAC,EAAAC,cAAA,KAAGO,MAAM,0BCiBdE,MA5Bf,SAAeZ,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,QAAS,SAACQ,GACM,WAAjCA,EAAEC,OAAOC,aAAa,UACrBf,EAAMgB,eAGVf,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWI,IAAKR,EAAMkB,WAEzCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,KAAGO,MAAM,kBAAlC,WACAT,EAAAC,EAAAC,cAAA,UAAQC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,KAAGO,MAAM,qBAAlC,aAEFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,wBAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAlB,SACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,KAAlB,mCC0ELe,cA5Fb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAqCFI,UAAY,WAEV,IAAIC,EAAMR,EAAKS,MAAMC,KAAO,GAC5BV,EAAKW,SAAS,CACZD,KAAMF,IAGRI,QAAQC,IAAIL,GACZM,MAAM,+CAAgDd,EAAKS,MAAMC,KAAK,GAAI,qGACvEK,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAC,GACJJ,QAAQC,IAAIG,GACZ,IAAIE,EAAMF,EAAKG,QACfnB,EAAKW,SAALV,OAAAmB,EAAA,EAAAnB,CAAA,GACKD,EAAKS,MADV,CAEEY,IAAKH,EAAII,OAAOtB,EAAKS,MAAMY,QAE5BT,QAAQC,IAAIK,EAAII,OAAOtB,EAAKS,MAAMY,SArDvCrB,EAAKS,MAAQ,CACXY,IAAK,GACLE,OAAO,EACPb,KAAM,IAERV,EAAKwB,UAAYxB,EAAKwB,UAAUC,KAAfxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KACjBA,EAAKJ,WAAaI,EAAKJ,WAAW6B,KAAhBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KARNA,yEAWJ2B,GACRxB,KAAKQ,SAALV,OAAAmB,EAAA,EAAAnB,CAAA,GACKE,KAAKM,MADV,CAEEc,MAAOI,0CAKTxB,KAAKQ,SAALV,OAAAmB,EAAA,EAAAnB,CAAA,GACKE,KAAKM,MADV,CAEEc,OAAO,iDAIS,IAAAK,EAAAzB,KAClBW,MAAM,kJACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAC,GACJ,IAAIE,EAAMF,EAAKG,QACfS,EAAKjB,SAALV,OAAAmB,EAAA,EAAAnB,CAAA,GACK2B,EAAKnB,MADV,CAEEY,IAAKH,sCA2BN,IAAAW,EAAA1B,KASL,OAReA,KAAKM,MAAMY,IAAIS,IAAI,SAAAC,GAChC,OACElD,EAAAC,EAAAC,cAACiD,EAAD,CAAO9C,SAAU2C,EAAKL,UACpBrC,IAAK4C,EAAQE,KAAKC,MAClBC,KAAMJ,EAAQK,KAAKD,0CAQzB,OACEtD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACc,EAAD,OAEFhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZmB,KAAKM,MAAMc,OAAS1C,EAAAC,EAAAC,cAACsD,EAAD,CAAOzC,WAAYO,KAAKP,WAC3CE,QAASK,KAAKM,MAAMc,QACrBpB,KAAKM,MAAMY,KAAOlB,KAAKmC,QAE1BzD,EAAAC,EAAAC,cAACwD,EAAAzD,EAAD,CACE0D,WAAYrC,KAAKmC,KAAKG,OACtBC,KAAMvC,KAAKI,UACXoC,SAAS,GACPxC,KAAKmC,cAvFCM,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.d67f6654.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../Cards/Cards.css'\r\n\r\nfunction Cards(props){\r\n    return(\r\n        <div >\r\n            <img className=\"img\" onClick={()=>props.imgClick(props.url)}\r\n            src={props.url}></img>\r\n            \r\n        </div>\r\n        )\r\n}\r\nexport default Cards; ","import React from 'react'\r\nimport '../Navbar/Navbar.css'\r\n\r\n\r\n\r\nfunction Navbar(props){\r\n    return(\r\n        <div className=\"menu\">\r\n            <navbar className=\"navbar\" >\r\n                <url className=\"list\">\r\n                    <i class=\"fab fa-pinterest\"></i>\r\n                    <input className=\"search\" placeholder=\"buscar\"></input>\r\n                    <a className=\"home\">Inicio</a>\r\n                    <a className=\"next\">Siguiendo</a>\r\n                    <a className=\"user\">Verioska</a>\r\n                    <i class=\"fas fa-comment-dots\"></i>\r\n                    <i class=\"fas fa-bell\"></i>\r\n                    <i class=\"fas fa-ellipsis-h\"></i>\r\n                </url>\r\n            </navbar>\r\n        </div>\r\n        )\r\n}\r\nexport default Navbar; ","import React from 'react'\r\nimport '../Modal/Modal.css';\r\nimport Navbar from '../Navbar/Navbar';\r\n\r\n\r\n\r\nfunction Modal(props){\r\n    return(\r\n        <div className=\"modal1\" onClick={(e)=>{\r\n            if(e.target.getAttribute(\"class\")===\"modal1\"){\r\n                props.modalClose()\r\n            }\r\n        }}>\r\n            <Navbar/>\r\n            <div className=\"modal2\">\r\n                <div>\r\n                    <img className=\"imgModal\" src={props.viewImg}></img>\r\n                </div>\r\n                <div className=\"button\">\r\n                  <button className=\"btn1\"><i class=\"fas fa-upload\"></i> Enviar</button>\r\n                  <button className=\"btn2\"><i class=\"fas fa-thumbtack\"></i> Guardar</button>\r\n                </div>\r\n                <div className=\"tittle\">\r\n                    <h1 className=\"tittle1\">Fotos y comentarios</h1>\r\n                </div>\r\n                <div className=\"section\">\r\n                    <button className=\"btnPhoto\">Fotos</button>\r\n                    <button className=\"p\">Comentarios</button>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n}\r\nexport default Modal; ","import React, { Component } from 'react';\nimport './App.css';\nimport Cards from './Cards/Cards';\nimport Modal from './Modal/Modal';\nimport Navbar from './Navbar/Navbar';\nimport './Cards/Cards.css';\nimport InfiniteScroll from 'react-infinite-scroll-component'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      img: \"\",\n      modal: false,\n      page: 20\n    }\n    this.modalOpen = this.modalOpen.bind(this);\n    this.modalClose = this.modalClose.bind(this);\n}\n\n  modalOpen(i) {\n    this.setState({\n      ...this.state,\n      modal: i,\n    })\n  }\n\n  modalClose() {\n    this.setState({\n      ...this.state,\n      modal: false,\n    })\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.unsplash.com/search/photos?page=1&per_page=20&query=dog&client_id=3453296cbcd0ae1992d6ea9d4a5308dcdb45b3d005e8b4b57e4f9d38bda798dd\")\n      .then(data => data.json())\n      .then(data => {\n        let arr = data.results;\n        this.setState({\n          ...this.state,\n          img: arr,\n        })\n      });\n     \n  }\n\n  fetchData = () => {\n  \n    let con = this.state.page + 20;\n    this.setState({\n      page: con\n    \n    })\n    console.log(con)\n    fetch(\"https://api.unsplash.com/search/photos?page=\"+(this.state.page/20)+\"&per_page=20&query=dog&client_id=3453296cbcd0ae1992d6ea9d4a5308dcdb45b3d005e8b4b57e4f9d38bda798dd\")\n      .then(data => data.json())\n      .then(data => {\n        console.log(data)\n        let arr = data.results;\n        this.setState({\n          ...this.state,\n          img: arr.concat(this.state.img)\n        })\n         console.log(arr.concat(this.state.img))\n      });\n  }\n\n  show() {\n    const travel = this.state.img.map(element => {\n      return (\n        <Cards imgClick={this.modalOpen}\n          url={element.urls.thumb}\n          name={element.user.name} />\n\n      )\n    })\n    return travel\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Navbar />\n        </div>\n        <div className=\"contenedr\">\n          {this.state.modal && <Modal modalClose={this.modalClose}\n            viewImg={this.state.modal} />}\n          {this.state.img && this.show()}\n      </div>\n        <InfiniteScroll\n          dataLength={this.show.length}\n          next={this.fetchData}\n          hasMore={true}\n          >{this.show}\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}